
#!/bin/bash

# Trrrash – Safe Delete Script
# Author: Hussein Mohamed (https://github.com/husseinMohamed7)
# Version: 1.0.2

TRASH_DIR="$HOME/.trrrash"
mkdir -p "$TRASH_DIR"

VERSION="1.0.0"
AUTHOR="Hussein Mohamed Suleiman"
PROJECT_URL="https://github.com/husseinMohamed7/trrrash.git"

show_help() {
    echo "Usage: trrrash [options] file1 [file2 ...]"
    echo
    echo "Safely move files or directories to the trash instead of deleting them permanently."
    echo
    echo "Options:"
    echo "  -h, --help         Show this help message and exit"
    echo "  --version          Show version and author info"
    echo "  -f, --force        Skip confirmation prompts"
    echo "  -i                 Always ask before deleting each item"
    echo "  -e, --empty        Empty the trash and delete all metadata"
    echo "  -b, --back NAME    Restore file or directory by original name"
    echo "GitHub: $PROJECT_URL"
}

show_version() {
    echo "trrrash v$VERSION"
    echo "Author: $AUTHOR"
    echo "GitHub: $PROJECT_URL"
}

FORCE=false
INTERACTIVE=false
RESTORE_NAME=""
MODE="trash"
ARGS=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            show_help; exit 0;;
        --version)
            show_version; exit 0;;
        -f|--force)
            FORCE=true; shift;;
        -i)
            INTERACTIVE=true; shift;;
        -e|--empty)
            MODE="empty"; shift;;
        -b|--back)
            MODE="restore"; RESTORE_NAME="$2"; shift 2;;
        -* )
            echo "Unknown option: $1"; show_help; exit 1;;
        *  )
            ARGS+=("$1"); shift;;
    esac
done

if [[ "$MODE" == "empty" ]]; then
    if [[ "$FORCE" == false ]]; then
        read -p "Are you sure you want to empty the trash? (y/n): " confirm
        [[ ! "$confirm" =~ ^[Yy]$ ]] && echo "Cancelled." && exit 0
    fi
    rm -rf "$TRASH_DIR"/* 2>/dev/null
    echo "Trash emptied."
    exit 0
fi

if [[ "$MODE" == "restore" ]]; then
    if [ -z "$RESTORE_NAME" ]; then 
        echo "Error: Provide name to restore with -b"
        exit 1
    fi

    all_matches=( "$TRASH_DIR/${RESTORE_NAME}_"* )

    matches=()
    for item in "${all_matches[@]}"; do
        [[ "$item" != *.meta ]] && matches+=("$item")
    done

    if [ ${#matches[@]} -eq 0 ]; then
        echo "No such item found in trash."
        exit 1
    fi

    if [ ${#matches[@]} -gt 1 ]; then
        echo "Multiple versions of '$RESTORE_NAME' found in trash:"
        options=()
        for file in "${matches[@]}"; do
            meta_file="$file.meta"
            if [ -f "$meta_file" ]; then
                ts=$(grep '^timestamp=' "$meta_file" | cut -d= -f2)
                dt=$(date -d @$ts)
                echo " - $(basename "$file") → deleted at: $dt"
                options+=("$file")
            fi
        done

        echo
        echo "Select the number of the version to restore:"
        select choice in "${options[@]}"; do
            [ -n "$choice" ] && file="$choice" && break
        done
    else
        file="${matches[0]}"
    fi

    meta_file="$file.meta"
    if [ ! -f "$meta_file" ]; then 
        echo "Metadata missing."
        exit 1
    fi

    original_path=$(grep '^original_path=' "$meta_file" | cut -d= -f2-)
    original_name=$(grep '^original_name=' "$meta_file" | cut -d= -f2-)
    restore_path="$original_path"

    if [ -e "$restore_path" ]; then
        echo "A file already exists at '$restore_path'."
        echo "Choose an option:"
        echo "  1) Overwrite existing file"
        echo "  2) Rename restored file to '${original_name}_restored'"
        echo "  3) Cancel restore"
        read -p "Your choice: " option

        case $option in
            1)
                ;; # overwrite
            2)
                dir_path="$(dirname "$restore_path")"
                restore_path="$dir_path/${original_name}_restored"
                echo "Restoring to: $restore_path"
                ;;
            *)
                echo "Restore cancelled."
                exit 0
                ;;
        esac
    fi

    mkdir -p "$(dirname "$restore_path")"
    mv "$file" "$restore_path"
    rm -f "$meta_file"

    echo "Restored to: $restore_path"
    exit 0
fi


if [ ${#ARGS[@]} -eq 0 ]; then
    echo "Error: No items provided."; show_help; exit 1
fi

for target in "${ARGS[@]}"; do
    if [ ! -e "$target" ]; then echo "Item not found: $target"; continue; fi

    filename=$(basename "$target")
    timestamp=$(date +%s)
    newname="${filename}_$timestamp"
    destination="$TRASH_DIR/$newname"
    meta="$destination.meta"

    if [[ "$INTERACTIVE" == true ]]; then
        read -p "Delete '$target'? (y/n): " confirm
        [[ ! "$confirm" =~ ^[Yy]$ ]] && echo "Skipped: $target" && continue
    fi

    mv "$target" "$destination"
    echo "original_name=$filename" > "$meta"
    echo "original_path=$(realpath "$target")" >> "$meta"
    echo "timestamp=$timestamp" >> "$meta"
    echo "Moved '$target' to trash."
done

